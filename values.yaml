# Default values for ..
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: rg.fr-par.scw.cloud/decidim-sen/decidim-sen
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: [ ]

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: LoadBalancer
  port: 80
  targetPort: 3000

ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    cert-manager.io/issuer: letsencrypt-prod
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        -  chart-example.local
      secretName: decidim-sen-ingress-secret

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
#   cpu: 100m
#   memory: 128Mi

webAutoscaling:
  enabled: true
  minReplicas: 6
  maxReplicas: 100
  targetCPUUtilizationPercentage: 70
  stabilizationWindowSeconds: 30

sdqAutoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 100
  targetCPUUtilizationPercentage: 70
  stabilizationWindowSeconds: 30

nodeSelector: { }

tolerations: [ ]

affinity: { }

webContainerPort: 3000

migrateJob:
  ttlSecondsAfterFinished: 120
  command: ["bundle",  "exec", "rails", "db:migrate"]

databases:
  postgresql:
    externalPostgresDabatase: false
    database_url: "host.example.org"

#### SIDEKIQ Deployment ####

sidekiq:
  configMap:
    name: decidim-sen-sidekiq-config
    data:
      RAILS_ENV: production
      APP_NAME: "decidim_sen"
      RAILS_LOG_TO_STDOUT: "true"
    ############ data ################
    ## Must be a yaml format like below  ##
    ## Uncomment these lines to specify  ##
    #data:
    #  RAILS_ENV: production
    #  APP_NAME: "decidim_sen"
    #  RAILS_LOG_TO_STDOUT: 'true'
    #######################################
  deployment:
    name: sidekiq-sen-sidekiq-deployment
    spec:
      labels:
        app: decidim-sen-sidekiq
      affinity:
        termination:
          gracePeriodSeconds: 60 # Put your longest job here
      containers:
        livenessProbe:
          enabled: "true"
          initialDelaySeconds: 60 # app specific. Time your sidekiq takes to start processing.
          timeoutSeconds: 5 # can be much less
        readinessProbe:
          enabled: "true"
          initialDelaySeconds: 60 # app specific. Time your sidekiq takes to start processing.
          timeoutSeconds: 5 # can be much less
        resources: {}
        ############ Resources ################
        ## Must be a yaml format like below  ##
        ## Uncomment these lines to specify  ##
        #resources:
        #  requests:
        #    cpu: "100m"
        #    memory: "450Mi"
        #  limits:
        #    cpu: "1200m"
        #    memory: "1200Mi"
        #######################################
  secretRef:
    name: decidim-sidekiq-secret